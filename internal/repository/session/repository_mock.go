// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/session/repository.go
//
// Generated by this command:
//
//	mockgen -source internal/repository/session/repository.go -destination internal/repository/session/repository_mock.go
//

// Package mock_sessionrepository is a generated GoMock package.
package sessionrepository

import (
	model "avito/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckSessionByUserId mocks base method.
func (m *MockRepository) CheckSessionByUserId(ctx context.Context, userID uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSessionByUserId", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSessionByUserId indicates an expected call of CheckSessionByUserId.
func (mr *MockRepositoryMockRecorder) CheckSessionByUserId(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSessionByUserId", reflect.TypeOf((*MockRepository)(nil).CheckSessionByUserId), ctx, userID)
}

// CloseConnection mocks base method.
func (m *MockRepository) CloseConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockRepositoryMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockRepository)(nil).CloseConnection))
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, session model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, session)
}

// ResetSession mocks base method.
func (m *MockRepository) ResetSession(ctx context.Context, session model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetSession indicates an expected call of ResetSession.
func (mr *MockRepositoryMockRecorder) ResetSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSession", reflect.TypeOf((*MockRepository)(nil).ResetSession), ctx, session)
}

// SessionByUserId mocks base method.
func (m *MockRepository) SessionByUserId(ctx context.Context, userID uint32) (model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionByUserId", ctx, userID)
	ret0, _ := ret[0].(model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionByUserId indicates an expected call of SessionByUserId.
func (mr *MockRepositoryMockRecorder) SessionByUserId(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionByUserId", reflect.TypeOf((*MockRepository)(nil).SessionByUserId), ctx, userID)
}
