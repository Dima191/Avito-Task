// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/house/service.go
//
// Generated by this command:
//
//	mockgen -source internal/service/house/service.go -destination internal/service/house/service_mock.go
//

// Package mock_houseservice is a generated GoMock package.
package houseservice

import (
	model "avito/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, house model.House) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, house)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, house any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, house)
}

// Houses mocks base method.
func (m *MockService) Houses(ctx context.Context, offset, limit int) ([]model.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Houses", ctx, offset, limit)
	ret0, _ := ret[0].([]model.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Houses indicates an expected call of Houses.
func (mr *MockServiceMockRecorder) Houses(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Houses", reflect.TypeOf((*MockService)(nil).Houses), ctx, offset, limit)
}
