// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/apartment/service.go
//
// Generated by this command:
//
//	mockgen -source internal/service/apartment/service.go -destination internal/service/apartment/service_mock.go
//

// Package mock_apartmentservice is a generated GoMock package.
package apartmentservice

import (
	model "avito/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Apartments mocks base method.
func (m *MockService) Apartments(ctx context.Context, houseID uint32, offset, limit int, role string) ([]model.Apartment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apartments", ctx, houseID, offset, limit, role)
	ret0, _ := ret[0].([]model.Apartment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apartments indicates an expected call of Apartments.
func (mr *MockServiceMockRecorder) Apartments(ctx, houseID, offset, limit, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apartments", reflect.TypeOf((*MockService)(nil).Apartments), ctx, houseID, offset, limit, role)
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, apartment model.Apartment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, apartment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, apartment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, apartment)
}

// Update mocks base method.
func (m *MockService) Update(ctx context.Context, apartment model.Apartment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, apartment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(ctx, apartment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, apartment)
}
